<?php
/*
    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License version 2 as published by the Free Software Foundation.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.

    ---
    Copyright (C) 2009, Tiago Natel de Moura tiago_moura@live.com
*/

/**
 * Orion
 * {info}
 *
 * @package     Orion
 * @author      Tiago Moura <tiago_moura@live.com>
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.orion-framework.org
 * @since       1.0
 * @version     $Revision: 1 $
 */

class OrionBuilder_Models extends OrionBuilder
{
	protected $configs 	= array();
	protected $project	= 0;
	public $impl		= array();
	
	public function __construct( $project )
	{
		$this->project = $project;
		
		require_once(Orion::getPath() . DIRECTORY_SEPARATOR . 'Vendor' .DIRECTORY_SEPARATOR . 'Spyc' . DIRECTORY_SEPARATOR . 'spyc.php');
		$this->configs = Spyc::YAMLLoad(Orion::getPathIndex() . DIRECTORY_SEPARATOR . 'scripts' . DIRECTORY_SEPARATOR . 'projects' . DIRECTORY_SEPARATOR . $project . '.yml');
	}

	/**
	 * @class	Orion
	 * @scope	public
	 * @name	generateOrionTemplateModel
	 * @param	STRING	$file
	 * @param	STRING 	$name
	 * @return	array
	 */
	public function generateOrionTemplateModel( $file, $name )
	{
		$this->impl[basename($file, '.php')] = $name;
		
		$pathModels = getcwd() . DIRECTORY_SEPARATOR . 
						'apps' . DIRECTORY_SEPARATOR . 
						$this->project . DIRECTORY_SEPARATOR . 
						$this->configs[$this->project]['database']['dir_database'] . DIRECTORY_SEPARATOR . 
						$this->configs[$this->project]['database']['dir_models'];
						
		$target 	= 	$pathModels . DIRECTORY_SEPARATOR . $name . '.php';
		$include = array();
		
		if(file_exists($target))
		{
			fprintf(STDERR, "\n\tModel %s já existe!!!\n\n", $name);
			sleep(3);
		} else {
			$rel = $this->getRelationsForTemplate($file);
				
			if( isset($rel['hasOne']) )
				foreach($rel['hasOne'] as $relation)
					$include[] = dirname($file) . DIRECTORY_SEPARATOR . $relation['rel'] . '.php';
			
			if(isset($rel['hasMany']))
				foreach($rel['hasMany'] as $relation)
					$include[] = dirname($file) . DIRECTORY_SEPARATOR . $relation['rel']. '.php';
			
			if(isset($rel['actAs']))
				foreach($rel['actAs'] as $relation)
					$include[] = dirname($file) . DIRECTORY_SEPARATOR . $relation . '.php';
			
			$include[] = $file;
			$include[] = dirname($file) . DIRECTORY_SEPARATOR . 'OrionTemplate.php';
			
			foreach($include as $template)
			{
				$rel = $this->getRelationsForTemplate($template);
				if(isset($rel['hasOne']))
					foreach($rel['hasOne'] as $relation)
						$include[] = dirname($file) . DIRECTORY_SEPARATOR . $relation['rel'].'.php';
				if(isset($rel['hasMany']))
					foreach($rel['hasMany'] as $relation)
						$include[] = dirname($file) . DIRECTORY_SEPARATOR . $relation['rel'].'.php';
				if(isset($rel['actAs']))
					foreach($rel['actAs'] as $relation)
						$include[] = dirname($file) . DIRECTORY_SEPARATOR . $relation . '.php';
			}
			
			$this->_generateModel( $target, $name, array($file) );
			
			
			foreach($include as $file)
			{
				if(copy($file, $pathModels . DIRECTORY_SEPARATOR . basename($file)) == FALSE)
				{
					fprintf(STDERR, "\n\tNão foi possivel copiar o arquivo: \n\t%s --> %s.\n", $file, $pathModels . DIRECTORY_SEPARATOR . basename($file));
					exit(1);
				}
			}
			
			return $this->impl;
		}
	}
	
	public function registerImpl( $template, $obj )
	{
		$fp = fopen(	getcwd() . DIRECTORY_SEPARATOR . 'apps' . DIRECTORY_SEPARATOR . 
						$this->project . DIRECTORY_SEPARATOR .
						'database' . DIRECTORY_SEPARATOR .
						'impl.yml',
						"a+"	
					);
		$impl 	= array();
		$impl[]	= "";
		$impl[]	= $template . ": " . $obj;
		
		if( fwrite($fp, implode("\n", $impl)) === FALSE )
		{
			fprintf(STDERR, "\nNão foi possivel gravar no arquivo de implementações.\n");
			exit(1);
		}
		
		return;		
	}

	/**
	 * @class	Orion
	 * @scope	public
	 * @name	_generateModel
	 * @param	string	$model
	 * @param	string	$name
	 * @param	boolean	$actAs
	 * @return	boolean;
	 */
	protected function _generateModel( $model, $name, $actAs = array() )
	{
		$q = array();
		
		$q[]	= "<?php";
		$q[]	= "/**";
		$q[]	= " *";
		$q[]	= " * This file was auto-generated by OrionFramework";
		$q[]	= " * www.orionframework.com";
		$q[]	= " */";
		$q[]	= " class " . $name . " extends Doctrine_Record";
		$q[]	= " {";
		$q[]	= " \tpublic function setTableDefinition()";
		$q[]	= " \t{";
		$q[]	= " \t\t\$this->hasColumn('id', 'integer', 8, array(";
		$q[]	= " \t\t\t\t'primary'\t\t=> true,";
		$q[]	= " \t\t\t\t'autoincrement'\t=> true,";
		$q[]	= " \t\t\t\t'notnull'\t\t=> true";
		$q[]	= " \t\t\t\t)";
		$q[]	= " \t\t);";
		$q[]	= " ";		
		$q[]	= " \t}";
		$q[]	= " ";
		$q[]	= " \tpublic function setUp()";
		$q[]	= " \t{";
			foreach($actAs as $rel)
				$q[] 	= " \t\t\$this->actAs('".basename($rel, '.php')."');";
		$q[]	= " ";
		$q[]	= " \t\t\$this->actAs('OrionTemplate');";
		$q[]	= " \t}";
		$q[]	= " }";
		$q[]	= " ";
		
		$modelStr = implode("\n", $q);
		$this->saveFile($model, $modelStr, true);
		return;
	}
	
	/**
	 * @class 	OrionBuilder_Models
	 * @name	getRelationsForTemplate
	 * @param	string	$file
	 * @return 	array
	 *
	 * Este método retorna as relações entre os templates ObjectModels.
	 * As relações devem ser escritas nos templates de uma das seguintes formas:
	 * 
	 * $this->hasOne('TesteTemplate as teste', array('local'	=> 'teste_id', 'foreign'	=> 'id'));
	 * 
	 * $this->hasOne('TesteTemplate', array('local'	=> 'teste_id', 'foreign'	=> 'id'));
	 *
	 * $this->hasOne('TesteTemplate as teste', array(
	 *			'local'	=> 'teste_id', 'foreign'	=> 'id'
	 *				)
	 *	);
	 *
	 * $this->hasOne('TesteTemplate as Teste', array(
	 *				'local'		=> 'teste_id',
	 *				'foreign'	=> 'id'
	 *				)
	 *	);
	 *
	 * $this->hasOne('TesteTemplate', array(
	 *				'local'		=> 'teste_id',
	 *				'foreign'	=> 'id'
	 *				)
	 *	);
	 * 
	 * - O mesmo vale para hasMany;
	 * - Espaços entre strings são ignorados
	 * - e mais alguns formatos ;)
	 */
	protected function getRelationsForTemplate( $file )
	{
		
		if(!file_exists($file) || !($fp = fopen($file, "r")))
		{
			fprintf(STDERR, "\n\tO arquivo de template %s não existe ou não pode ser aberto.\n", $file);
			exit(1);
		}
		
		$relations = array();
		
		$lines = file($file);
		for($i=0; $i<count($lines); $i++)
		{
			// @pcre 	$this->hasOne('TesteTemplate as Teste', array('local'	=> 'teste_id', 'foreign'	=> 'id'));
			if(preg_match('/\$this\-\>hasOne\([\s\t]*?\'(\w+) as (\w+)\'[\s\t]*?\,[\s\t]*?array[\s\t]*?\([\s\t]*?\'local\'[\s\t]*?\=\>[\s\t]*?\'(\w+)\'[\s\t]*?\,[\s\t]*?\'foreign\'[\s\t]*?\=\>[\s\t]*?\'(\w+)\'[\s\t]*?\)[\s\t]*?\)[\s\t]*?\;/', $lines[$i], $match))
				$relations['hasOne'][]['rel'] = $match[1];
			
			// @pcre	$this->hasOne('TesteTemplate', 'local'	=> 'teste_id', 'foreign'	=> 'id');
			elseif(preg_match('/\$this\-\>hasOne\([\s\t]*?\'(\w+)\'[\s\t]*?\,[\s\t]*?array[\s\t]*?\([\s\t]*?\'local\'[\s\t]*?\=\>[\s\t]*?\'(\w+)\'[\s\t]*?\,[\s\t]*?\'foreign\'[\s\t]*?\=\>[\s\t]*?\'(\w+)\'[\s\t]*?\)[\s\t]*?\)[\s\t]*?\;/', $lines[$i], $match))
				$relations['hasOne'][]['rel'] = $match[1];
			/*
			 * @pcre \
			 * $this->hasOne('TesteTemplate as Teste',
			 *				'local'		=> 'teste_id', 'foreign'	=> 'id'
			 * 				)
			 * );
			 */
			elseif(preg_match('/\$this\-\>hasOne\([\s\t]*?\'(\w+) as (\w+)\'[\s\t]*?\,[\s\t]*?array[\s\t]*?\([\s\t]*?$/', $lines[$i], $match))
			{
				$relations['hasOne'][]['rel'] = $match[1];
				$i++;
				
				/*
				 * @pcre \
				 * $this->hasOne('TesteTemplate as Teste',
				 *				'local'		=> 'teste_id', 'foreign'	=> 'id'
				 * 				)
				 * );
				 */
				if(preg_match('/[\s\t]*?\'local\'[\s\t]*?\=\>[\s\t]*?\'(\w+)\'[\s\t]*?\,[\s\t]*?\'foreign\'[\s\t]*?\=\>[\s\t]*?\'(\w+)\'/', $lines[$i], $match))
				{
					$relations['hasOne'][count($relations['hasOne'])-1]['local'] = $match[1];
					$relations['hasOne'][count($relations['hasOne'])-1]['foreign'] = $match[2];
				} 
				
				/*
				 * @pcre \
				 * $this->hasOne('TesteTemplate as Teste',
				 *				'local'		=> 'teste_id', 
				 *				'foreign'	=> 'id'
				 * 				)
				 * );
				 */
				elseif(preg_match('/[\s\t]*?\'local\'[\s\t]*?\=\>[\s\t]*?\'(\w+)\'/', $lines[$i], $match))
				{
					$relations['hasOne'][count($relations['hasOne'])-1]['local'] = $match[1];
					$i++;
					if(preg_match('/[\s\t]*?[\s\t]*?\'foreign\'[\s\t]*?\=\>[\s\t]*?\'(\w+)\'/', $lines[$i], $match))
						$relations['hasOne'][count($relations['hasOne'])-1]['foreign'] = $match[1];					
				}
			} elseif(preg_match('/\$this\-\>hasOne\([\s\t]*?\'(\w+)\'[\s\t]*?\,[\s\t]*?array[\s\t]*?\([\s\t]*?$/', $lines[$i], $match))
			{
				$relations['hasOne'][]['rel'] = $match[1];
				$i++;
				
				/*
				 * @pcre \
				 * $this->hasOne('TesteTemplate as Teste',
				 *				'local'		=> 'teste_id', 'foreign'	=> 'id'
				 * 				)
				 * );
				 */
				if(preg_match('/[\s\t]*?\'local\'[\s\t]*?\=\>[\s\t]*?\'(\w+)\'[\s\t]*?\,[\s\t]*?\'foreign\'[\s\t]*?\=\>[\s\t]*?\'(\w+)\'/', $lines[$i], $match))
				{
					$relations['hasOne'][count($relations['hasOne'])-1]['local'] = $match[1];
					$relations['hasOne'][count($relations['hasOne'])-1]['foreign'] = $match[2];
				} 
				
				/*
				 * @pcre \
				 * $this->hasOne('TesteTemplate as Teste',
				 *				'local'		=> 'teste_id', 
				 *				'foreign'	=> 'id'
				 * 				)
				 * );
				 */
				elseif(preg_match('/[\s\t]*?\'local\'[\s\t]*?\=\>[\s\t]*?\'(\w+)\'/', $lines[$i], $match))
				{
					$relations['hasOne'][count($relations['hasOne'])-1]['local'] = $match[1];
					$i++;
					if(preg_match('/[\s\t]*?[\s\t]*?\'foreign\'[\s\t]*?\=\>[\s\t]*?\'(\w+)\'/', $lines[$i], $match))
						$relations['hasOne'][count($relations['hasOne'])-1]['foreign'] = $match[1];					
				}
			}
			// HASMANY
			// @pcre 	$this->hasMany('TesteTemplate as Teste', array('local'	=> 'teste_id', 'foreign'	=> 'id'));
			elseif(preg_match('/\$this\-\>hasMany\([\s\t]*?\'(\w+) as (\w+)\'[\s\t]*?\,[\s\t]*?array[\s\t]*?\([\s\t]*?\'local\'[\s\t]*?\=\>[\s\t]*?\'(\w+)\'[\s\t]*?\,[\s\t]*?\'foreign\'[\s\t]*?\=\>[\s\t]*?\'(\w+)\'[\s\t]*?\)[\s\t]*?\)[\s\t]*?\;/', $lines[$i], $match))
				$relations['hasMany'][]['rel'] = $match[1];
			
			// @pcre	$this->hasMany('TesteTemplate', 'local'	=> 'teste_id', 'foreign'	=> 'id');
			elseif(preg_match('/\$this\-\>hasMany\([\s\t]*?\'(\w+)\'[\s\t]*?\,[\s\t]*?array[\s\t]*?\([\s\t]*?\'local\'[\s\t]*?\=\>[\s\t]*?\'(\w+)\'[\s\t]*?\,[\s\t]*?\'foreign\'[\s\t]*?\=\>[\s\t]*?\'(\w+)\'[\s\t]*?\)[\s\t]*?\)[\s\t]*?\;/', $lines[$i], $match))
				$relations['hasMany'][]['rel'] = $match[1];
			/*
			 * @pcre \
			 * $this->hasMany('TesteTemplate as Teste',
			 *				'local'		=> 'teste_id', 'foreign'	=> 'id'
			 * 				)
			 * );
			 */
			elseif(preg_match('/\$this\-\>hasMany\([\s\t]*?\'(\w+) as (\w+)\'[\s\t]*?\,[\s\t]*?array[\s\t]*?\([\s\t]*?$/', $lines[$i], $match))
			{
				$relations['hasMany'][]['rel'] = $match[1];
				$i++;
				
				/*
				 * @pcre \
				 * $this->hasMany('TesteTemplate as Teste',
				 *				'local'		=> 'teste_id', 'foreign'	=> 'id'
				 * 				)
				 * );
				 */
				if(preg_match('/[\s\t]*?\'local\'[\s\t]*?\=\>[\s\t]*?\'(\w+)\'[\s\t]*?\,[\s\t]*?\'foreign\'[\s\t]*?\=\>[\s\t]*?\'(\w+)\'/', $lines[$i], $match))
				{
					$relations['hasMany'][count($relations['hasMany'])-1]['local'] = $match[1];
					$relations['hasMany'][count($relations['hasMany'])-1]['foreign'] = $match[2];
				} 
				
				/*
				 * @pcre \
				 * $this->hasMany('TesteTemplate as Teste',
				 *				'local'		=> 'teste_id', 
				 *				'foreign'	=> 'id'
				 * 				)
				 * );
				 */
				elseif(preg_match('/[\s\t]*?\'local\'[\s\t]*?\=\>[\s\t]*?\'(\w+)\'/', $lines[$i], $match))
				{
					$relations['hasMany'][count($relations['hasMany'])-1]['local'] = $match[1];
					$i++;
					if(preg_match('/[\s\t]*?[\s\t]*?\'foreign\'[\s\t]*?\=\>[\s\t]*?\'(\w+)\'/', $lines[$i], $match))
						$relations['hasMany'][count($relations['hasMany'])-1]['foreign'] = $match[1];					
				}
			} elseif(preg_match('/\$this\-\>hasMany\([\s\t]*?\'(\w+)\'[\s\t]*?\,[\s\t]*?array[\s\t]*?\([\s\t]*?$/', $lines[$i], $match))
			{
				$relations['hasMany'][]['rel'] = $match[1];
				$i++;
				
				/*
				 * @pcre \
				 * $this->hasMany('TesteTemplate as Teste',
				 *				'local'		=> 'teste_id', 'foreign'	=> 'id'
				 * 				)
				 * );
				 */
				if(preg_match('/[\s\t]*?\'local\'[\s\t]*?\=\>[\s\t]*?\'(\w+)\'[\s\t]*?\,[\s\t]*?\'foreign\'[\s\t]*?\=\>[\s\t]*?\'(\w+)\'/', $lines[$i], $match))
				{
					$relations['hasMany'][count($relations['hasMany'])-1]['local'] = $match[1];
					$relations['hasMany'][count($relations['hasMany'])-1]['foreign'] = $match[2];
				} 
				
				/*
				 * @pcre \
				 * $this->hasMany('TesteTemplate as Teste',
				 *				'local'		=> 'teste_id', 
				 *				'foreign'	=> 'id'
				 * 				)
				 * );
				 */
				elseif(preg_match('/[\s\t]*?\'local\'[\s\t]*?\=\>[\s\t]*?\'(\w+)\'/', $lines[$i], $match))
				{
					$relations['hasMany'][count($relations['hasMany'])-1]['local'] = $match[1];
					$i++;
					if(preg_match('/[\s\t]*?[\s\t]*?\'foreign\'[\s\t]*?\=\>[\s\t]*?\'(\w+)\'/', $lines[$i], $match))
						$relations['hasMany'][count($relations['hasMany'])-1]['foreign'] = $match[1];					
				}
			} elseif(preg_match('/[\s\t]*?\$this\-\>actAs[\s\t]*?\([\s\t]*?\'(\w+)Template\'/', $lines[$i], $match))
				$relations['actAs'][] = $match[1] . 'Template';
		}
		
		return $relations;
	}
}