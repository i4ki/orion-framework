<?php
/*
    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License version 2 as published by the Free Software Foundation.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.

    ---
    Copyright (C) 2009, Tiago Natel de Moura tiago_moura@live.com
*/

/**
 * Orion
 * {info}
 *
 * @package     Orion
 * @author      Tiago Moura <tiago_moura@live.com>
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.orion-framework.org
 * @since       1.0
 * @version     $Revision: 1 $
 */

 class OrionBuilder_UnitTests
	extends OrionBuilder
 {
	protected $_class;
	protected $filename;
	protected $methods;
	protected $_argv;
	
	public function __construct( $argv )
	{
		$this->_argv = $argv;
	}
	
	public function generateTest( $class, $method = FALSE)
	{
		if( !file_exists($class) )
		{
			printf("A classe a ser testada não foi encontrada.\n");
			exit(1);
		} elseif( is_dir($class) )
		{
			printf("ERRO: É um diretório.\n");
			exit(1);
		}
		$this->filename = $class;
		$this->_class = file($class);
		$this->getNameClass();
		$this->getMethods();
		$this->_generateTest();		
	}
	
	protected function _generateTest()
	{
		$q[]	= "<?php";
		$q[]	= "/**";
		$q[]	= " *";
		$q[]	= " * This file was auto-generated by Orion-Framework";
		$q[]	= " * ";
		$q[]	= " * www.orion-framework.org";
		$q[]	= " *";
		$q[]	= " */";
		$q[]	= " ";
		$q[]	= " class test" . $this->nameClass . " extends PHPUnit_Framework_TestCase";
		$q[]	= " {";
		$q[]	= " \tprotected \$test \t= 0;";
		$q[]	= " ";
		$q[]	= " \tpublic function setUp()";
		$q[]	= " \t{";
		$q[]	= " \t\t\$this->test\t= new " . $this->nameClass . "();";
		$q[]	= " \t}";
		$q[]	= " ";
		
		/**
		 * Teste se a classe existe
		 */
		$q[]	= " \tpublic function test_IF_Class_" . $this->nameClass . "_Exists()";
		$q[]	= " \t{";
		$q[]	= " \t\t\$this->assertTrue( class_exists( '".$this->nameClass."' ) );";
		$q[]	= " \t}";
		$q[]	= " ";
		
		foreach( $this->methods as $method )
		{
			/**
			 * Teste se o método existe
			 */
			$q[]	= " \tpublic function test_IF_Method_" . $method['method'] . "_Exists()";
			$q[]	= " \t{";
			$q[]	= " \t\t\$this->assertTrue( method_exists( \$this->test, '" . $method['method'] . "' ) );";
			$q[]	= " \t}";
			$q[]	= " ";
			
		}
		
		$q[]	= " }";
		$q[]	= " ";
		
		$content = implode("\n",$q);
		
		$file = basename($this->filename);
		$file = 'apps/'.$this->_argv[2].'/tests/test'.$file;
		chmod(dirname($file), 0777);
				
		$fp = fopen($file, "w");
		if( !fwrite($fp, $content) )
		{
			printf("Não é possivel gravar no arquivo %s.",$file);
			exit(1);
		} else {
			printf("Test created: %s\n", basename($file, '.php')); 
		}
			
		fclose($fp);
		return true;
		
	}
	
	protected function getNameClass()
	{
		$pattern = '/class\ ([a-zA-Z\_0-9]{1,})/';
		foreach($this->_class as $line)
			if( preg_match($pattern, $line, $matched) )
				return $this->nameClass = $matched[1];
		return $this->nameClass;
	}
	
	protected function getMethods()
	{
		/** pega os métodos */
		foreach($this->_class as $line)
			if(preg_match('/(public)|(protected)|(private)\s?.*?function.*?\(.*?\)/',$line))
			{
				$this->methods[]['proto'] = $line;
				
				if( preg_match_all('/(\$[a-zA-Z0-9\_]{1,})/', $line, $match) )
				{
					for($i=0;$i<count($match[0]);$i++)
						$this->methods[count($this->methods)-1]['params'][]	= $match[0][$i];
				}						
			}
		
		/** retira caracteres desnecessários */
		for($i=0;$i<count($this->methods);$i++)
		{
			$this->methods[$i]['proto'] 	= str_replace("\n",'',$this->methods[$i]['proto']);
			$this->methods[$i]['proto']		= str_replace(';','',$this->methods[$i]['proto']);
			$this->methods[$i]['proto'] 	= str_replace('{','',$this->methods[$i]['proto']);
			if(preg_match('/^(\s?)|(\t?)/',$this->methods[$i]['proto']))
				$this->methods[$i]['proto'] = preg_replace('/^(\s?)|(\t?)/', '', $this->methods[$i]['proto']);
		}
		
		/** pega o nome do método */
		for($i=0;$i<count($this->methods);$i++)
		{
			preg_match	(	'/^p.*?function.*?(\w{1,})/',
							$this->methods[$i]['proto'],
							$matched
						);
			$this->methods[$i]['method'] = $matched[1];
		}
		
		return $this->methods;
	}
 }