#
#    This library is free software; you can redistribute it and/or
#    modify it under the terms of the GNU Library General Public
#    License version 2 as published by the Free Software Foundation.
#
#    This library is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Library General Public License for more details.
#
#    You should have received a copy of the GNU Library General Public License
#    along with this library; see the file COPYING.LIB.  If not, write to
#    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
#    Boston, MA 02110-1301, USA.
#
#    ---
#    Copyright (C) 2009, Tiago Natel de Moura tiago_moura@live.com
#
#
#
# Orion
# {info}
#
# @package     Orion
# @author      Tiago Moura <tiago_moura@live.com>
# @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
# @link        www.orion-framework.org
# @since       1.0
# @version     $Revision: 1 $
#
#
#	ARQUIVO DE CONFIGURAÇÃO -- ORION FRAMEWORK
#
#	O Orion pode ser configurado de inúmeras maneiras, possuindo
#	um sistema de configuração em cascata, semelhante ao Cascading Style Sheet (CSS).
#	As configurações ajustadas em arquivos YAML serão sobrescritas por configurações
#	ajustadas através de uma "classe de configuração", que por sua vez, será sobrescrita
#	por configurações ajustadas diretamente nos commands, assim por diante.
#	-

project:
    name: {project}
    host: localhost
    date: {date}
    environment: 'development'

#	Esses são os diretórios padrões dos arquivos de um projeto Orion
#	Se desejar, você pode alterá-los, mas não garante a compatibilidade
#	com plugins e novas versões do Framework.
directory:
    commands: commands
    database: database
    libs: libs
    scripts: scripts
    tests: tests
    view: view

#	SISTEMA DE URL'S
#	O framework utiliza do design pattern Factory que automaticamente
#	instanciará as classes do Command
#	factory_url		default		=> utiliza da variável de ambiente _GET para pegar a action
#					friendly	=> utiliza-se de redirecionamento do apache para gerar url's amigáveis

system_url:
    factory_url: friendly

#	DATABASE
#	Altere as informações abaixo como desejar.

database:
    development:
        adapter: mysql
        host: localhost
        user: root
        pass: 123456789
        database: {database}_dev
        charset: utf8
        collate: utf8_general_ci
        engine: innodb
    test:
        adapter: mysql
        host: localhost
        user: root
        pass: 123456789
        database: {database}_test
        charset: utf8
        collate: utf8_general_ci
        engine: innodb
    production:
        adapter: mysql
        host: localhost
        user: root
        pass: 123456789
        database: {database}
        charset: utf8
        collate: utf8_general_ci
        engine: innodb
#	ORM
#	Object Relational Mapper
#	{ORM}			Doctrine *->	Atualmente esta é a única opção de ORM disponivel.
#	{LIB}		O caminho do arquivo do ORM, o path está em relação ao diretório interno do Orion
#	{CLASS		O nome da classe que contém o autoload
#	{AUTOLOAD}	O nome da função autoload

orm:
    lib: 'Vendor/Doctrine/Doctrine.php'
    class: Doctrine
    autoload: autoload

#	View
#	{template_system}	Nome do Mecanismo de template utilizado 
#	{lib}		Arquivo com a classe de configuração ou arquivo com a classe de template.
#	{class}		Se for necessaŕio incluir um autoload, ajustar aqui o nome da classe que
#				que contém a função autoload, se não for necessário deixe em branco ou ajuste "no".
#	{autoload}	Nome da função autoload, se não for necessário deixe em branco ou ajuste "no".
#
# 	Não há a necessidade de ajustar uma função autoload para cada classe proprietária que 
#	for necessário integrar com o Orion. Isto somente é necessário se a classe possuir um
# 	método autoload próprio. Se não for esse o caso, é preferível incluir suas bibliotecas
#	externas dentro do diretorio {apps}/{project}/{libs}/, pois este diretório já está mapeado
#	pelo autoload do Orion para você incluir suas bibliotecas.
#	Neste diretório as classes são chamadas seguindo o padrão de substituir '_' por '/' na busca
#	da classe pelos diretórios. Assim a classe mySecurityClass_Validation está dentro do 
#	diretório {apps}/{project}/{libs}/mySecurityClass/ no arquivo Validation.php. ^ ^
# 	-

view:
    template_system:
        lib: {apps}/{project}/{libs}/Smarty/Config.php
		class: no
		autoload: no